class Solution(object):
    def largestTriangleArea(self, points):
        """
        Find the largest triangle area using coordinate geometry
        Strategy: Brute force all combinations + cross product formula
        
        :type points: List[List[int]] - array of 2D coordinates
        :rtype: float - maximum triangle area possible
        """
        
        max_area_doubled = 0  # 🔢 Track maximum area (×2 from cross product)
        
        # 🎯 Generate all possible triangles using triple nested loops
        # Need exactly 3 points to form a triangle
        for i in range(len(points)):
            i1, i2 = points[i]  # 📍 First point coordinates (x₁, y₁)
            
            for j in range(i + 1, len(points)):  # ↗️ Start from i+1 to avoid duplicates
                j1, j2 = points[j]  # 📍 Second point coordinates (x₂, y₂)
                
                for k in range(j + 1, len(points)):  # ↗️ Start from j+1 to avoid duplicates
                    k1, k2 = points[k]  # 📍 Third point coordinates (x₃, y₃)
                    
                    # 📐 Apply coordinate geometry area formula
                    # Cross product formula: x₁(y₂-y₃) + x₂(y₃-y₁) + x₃(y₁-y₂)
                    # This gives us TWICE the actual triangle area!
                    area_doubled = abs(i1 * (j2 - k2) + j1 * (k2 - i2) + k1 * (i2 - j2))
                    
                    # 🏆 Update maximum if current triangle is larger
                    # Using ternary operator for concise comparison
                    max_area_doubled = area_doubled if area_doubled > max_area_doubled else max_area_doubled
        
        # 📊 Convert doubled area back to actual area
        # Cross product gives 2 × Area, so divide by 2.0
        return max_area_doubled / 2.0

# 🎓 Algorithm Walkthrough Example:
#
# Input: points = [[0,0],[0,1],[1,0]]
#
# Triangle: (0,0), (0,1), (1,0)
# i1=0, i2=0, j1=0, j2=1, k1=1, k2=0
# area_doubled = abs(0×(1-0) + 0×(0-0) + 1×(0-1))
#              = abs(0 + 0 - 1) = 1
# actual_area = 1 / 2.0 = 0.5 ✅
#
# 🔑 Why This Works:
#
# 1. Cross product formula directly computes twice the triangle area
# 2. Triple nested loops ensure we check ALL possible triangles
# 3. abs() handles negative results (orientation doesn't matter for area)  
# 4. Division by 2.0 converts doubled area to actual area
#
# 🚀 Optimizations Used:
# - Mathematical: Direct coordinate formula (no distance calculations!)
# - Loop: Start from i+1, j+1 to avoid duplicate combinations
# - Comparison: Ternary operator for concise max tracking
#
# 🎯 Time: O(n³), Space: O(1) - Optimal for the constraints! ⚡
